[Question P1.1] Comment représentez-vous ces vecteurs ? Comment sont-ils organisés : quels attributs ? quelles méthodes ? quels droits d'accès ?

Les vecteurs sont représentés en tant qu’objet de la classe notée Vecteur3D, et leur état est caractérisé par 3 attributs qui sont leurs coordonnées dans l’espace (x,y,z). On a ainsi utilisé un repère cartésien pour les définir. Il s’agit ici des seules données nécessaires à la création d’un vecteur. 
Les méthodes sont ici:
- le réglage d’une de leurs coordonnées
- le réglage de toutes les coordonnées à la fois
- l’affichage de ces coordonnées
- un test d’égalité entre ces vecteurs
- des opérations arithmétiques sur ces vecteurs: addition, soustraction et multiplication par un scalaire
- les produits scalaire et vectoriel
- le calcul de leur norme et leur norme au carré
- le vecteur unitaire associé au vecteur

Toutes ces méthodes sont publiques et tous les attributs sont privés afin qu’il ne soient pas librement manipulés.

[Question P4.1] Avez-vous ajouté un constructeur de copie ? Pourquoi (justifiez votre choix) ?

Non nous n’avons pas (encore) ajouté de constructeur de copie, car si nous en faisions un pour l’instant, il serait exactement pareil que celui fourni par défaut. Alors, si plus tard l’utilisation d’un tel constructeur devient utile, nous l’ajouterons, mais nous n’en voyons pas encore l’intérêt.

[Question P4.2] Si l'on souhaitait ajouter un constructeur par coordonnées sphériques (deux angles et une longueur),
a] que cela impliquerait-il au niveau des attributs de la classe ?
b] quelle serait la difficulté majeure (voire l'impossibilité) de sa réalisation en C++ ? (C'est d'ailleurs pour cela qu'on ne vous demande pas de faire un tel constructeur !)

A) Les attributs que nous avons définis n’auraient plus aucune utilité car nous utilisons 3 longueurs alors que les coordonnées sphériques utilisent 1 longueur et 2 angles. Il faudrait ajouter 3 nouveaux attributs correspondant à cette longueur et à ces 2 angles.

B) La majeure difficulté de réaliser un tel constructeur serait l’impossibilité de surcharger les constructeurs. En effet, que l’on choisisse coordonnées cartésiennes ou sphériques, nos 3 attributs sont des double, ainsi, il est impossible pour le constructeur de différencier en quel type de coordonnées nous sommes, il faudrait des types de retour différents, ou bien avec un nombre d’arguments différents. Dans ce cas, le code devient ambigu, ce qui est à proscrire.

[Question P4.3] Quels opérateurs avez vous introduits ?

Au total nous avons implémenté dans notre code 11 opérateurs différents, mais avec certains qui se basent sur d’autres : 
-l’opérateur de comparaison qui teste l’égalité ==, et par complémentarité celui qui teste l’inégalité !=. Ces deux opérateurs retournent des booléens.
-l’opérateur d’affichage << , défini de façon externe, et qui retourne un ostream pour pouvoir en enchaîner plusieurs à la suite (ce qu’on ne pourrait faire avec pour type de retour void).
-Les opérateurs algébriques basiques, donc +=, -=, qui font l’addition et la différence, l’opérateur + aussi, qui est défini à partir du +=, l’opérateur de multiplication scalaire *= (il faut bien mettre le scalaire après le vecteur), et l’opérateur qui calcule l’opposé -. Tous ces opérateurs renvoient un vecteur.
-Les opérateurs algébriques adaptés aux vecteurs, nous avons mis le produit vectoriel avec l’opérateur ^, et qui renvoie un vecteur, le produit scalaire & qui renvoie lui un double, et enfin l’opérateur ~ qui donne le vecteur unitaire associé au vecteur que nous choisissons.







[Question P7.1] En termes de POO, quelle est donc la nature de la méthode dessine_sur() ?

En terme de POO, la méthode dessine_sur() est une méthode polymorphique virtuelle pure, et permet donc à des objets de différentes sous-classes d’une même super classe d’utiliser une même méthode de façon spécifique alors que la méthode reste générale.

[Question P8.1] A quoi faut-il faire attention pour les classes contenant des pointeurs ? Quelle(s) solution(s) est/sont envisageable(s) ?

Il faut d’abord faire attention aux questions d’allocation de mémoire, que nous ferons ici de façon dynamique, et il fait surtout faire attention à la désallocation de cette mémoire, mais ici ce problème sera géré par l’ordinateur lui-même car nous utilisons des unique_ptr. Il faut aussi faire attention à la copie ou la duplication de pointeurs, en effet, si la copie est mal gérée, des objets peuvent avoir un comportement non voulu, par exemple être supprimés dans une méthode et ne plus être utilisables par la suite. Nous utilisons donc ici la copie profonde lorsque nous manions des pointeurs et pas la copie de surface pour éviter ces problèmes.

[Question P8.2] Comment représentez vous la classe Systeme ?
Expliquez votre conception (attributs, interface, ...).

La classe Système est déjà représentée comme une sous classe de Dessinable afin de pouvoir la dessiner. Nous représentons cette classe avec les attributs composants, qui est une collection hétérogène de Particules, donc un vector de unique_ptr pointant sur des Particules, et aussi une Enceinte pour bien délimiter ce système.
Nous l’affichons pour l’instant avec l’opérateur << simplement comme une liste d’affichages des éléments au sein de la collection hétérogène.

[Question P8.3] Comment empêchez-vous cela (copie et affectation) ?

Nous faisons pour cela une « destruction » du constructeur de copie, et utilisons la ligne suivante :

Systeme(Systeme const& s) = delete;

[Question P9.1] Comment (et à quel(s) endroit(s)) intégrez vous ces deux aspects ?

Ces deux aspects seront intégrés dans la classe Système. En effet, la simulation du système physique doit être rattachée à la classe Système qui a pour but de représenter tout ce qui forme le système physique simulé.

[Question P9.2] Quelle est la complexité de l'algorithme de simulation lorsqu'il utilise cette méthode pour savoir si deux particules se rencontrent ?

En effet, notre méthode évolue de la classe parcourt l’entièreté du tableau composants et, pour chacune des particule appartenant au tableau composant, on « reparcourt » le tableau composant pour tester si une à une les particules ont la même position. Par conséquent, une boucle for dans une boucle for a une complexité en O(n2) avec n la taille du tableau composants (c’est-à-dire n le nombre de particules du système).

[Question P11.1] Si vous souhaitez voir l'enceinte, c.-à-d. la faire dessiner, comment devez vous modifier (ou pas)
votre conception/votre code ?

Pour dessiner l’enceinte, notre méthode de la classe Systeme est déjà adaptée pour cela, néanmoins, nous devons redéfinir dans VueOpenGL la méthode dessine prenant comme paramètre une enceinte pour que le code marche. En effet, dans cette méthode, nous appelons une méthode dessineEnceinte que nous avons du créer et qui dessine les arêtes de notre enceinte afin de la visualiser. 

[Question P13.1] Comment représentez-vous cette/ces nouvelle(s) particule(s) ? Où s'incri(ven)t-elle(s) dans votre
conception ?

Nous avons décidé pour dessiner la trace de certaines particules de créer une classe Tracable. Alors, pour avoir des Neon, Argon ou Helium traçables, nous avons choisi de faire de l’héritage multiple. Ces particules traçables héritent à la fois de la classe Particule (ou plutôt de la sous classe de Particule correspondant à l’élément chimique concerné) et de la classe Tracable. Ainsi, nous limitons le nombre de particules traçables seulement à celles héritant bien de la classe Tracable, et lors du dessin de ces particules traçables, nous prenons à la fois ses propriétés en tant que Particule pour dessiner la particule et ses propriétés en tant que Tracable pour dessiner la trace.

QUESTION 14.1

En supposant que le nombre de particules par case est négligeable et que la taille d’une case est petite par rapport à la taille de l’enceinte, ce modèle de collision parcourt l’ensemble des cases du système une seule fois quelque soit le nombre de particules dans le système qui et créé un ensemble de collisions, en fonction du nombre de particules dans une case. Par conséquent, la complexité de ce modèle est en O(1). Chaque case « répond » par vrai ou faux lorsqu’on la parcourt pour savoir si elle contient plus d’une particule.(Ce qui entrainerait une collision dans le cas d’une réponse affirmative). L’indépendance du nombre de cases par rapport au nombre de particules engendre ainsi une complexité en O(1).

QUESTION 14.2

Cette nouvelle façon de calculer les collisions a été implémenté dans la classe Système_intelligent, une sous-classe de système qui fonctionne selon ce nouveau modèle. Un Système contient des pointeurs intelligents sur des Particule tandis qu’un Système_intelligent contient des pointeurs sur des Intelligente (des particules intelligentes). La différence entre ces particules est que la particule Intelligente connaît la case dans laquelle elle se trouve. Les cases deviennent un vector de dimension 4. Le nombre de cases dépend de la taille de l’enceinte et du pas d’espace fixé à l’instanciation d’un Système_intelligent. Chaque case connaît les particules qu’elle contient dès l’ajout d’une particule au système. Les méthodes calculant s’il y a choc ou non sont implémentés dans la classe Système_intelligent. Il s’agit de la méthode évolue, une méthode virtuelle de Système qui « effectue » le modèle de collision correspondant au type de Système qui y fait appel. Lorsqu’une particule change de case (en se déplaçant), on la supprime du vector de son ancienne case pour l’ajouter dans sa nouvelle case. Étant donné que chaque particule doit aussi connaître à quelle case elle appartient, on actualise la valeur de cet attribut dans la classe Intelligente.	
